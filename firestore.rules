rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description This ruleset enforces a strict user-ownership model for user profiles and orders,
     *              allows public read access to products and gallery items, and restricts write
     *              access to owner-only for user-specific data.
     * @dataStructure
     *  - /users/{userId}: Stores user profile information.
     *  - /products/{productId}: Stores product information.
     *  - /users/{userId}/orders/{orderId}: Stores order information for each user.
     *  - /orders/{orderId}/orderItems/{orderItemId}: Stores order items associated with a specific order.
     *  - /gallery/{galleryItemId}: Stores gallery items (photos and videos) for public display.
     * @keySecurityDecisions
     *  - Users can only read and write their own profile data.
     *  - Users can only read their own order data.
     *  - Products and gallery items are publicly readable.
     *  - Listing of orderItems collection is disallowed because there is no clearly defined role or owner.
     * @denormalizationForAuthorization N/A
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read product information, but restricts creation, updates, and deletion.
     * @path /products/{productId}
     * @allow (get, list) true
     * @deny (create, update, delete) false
     * @principle Allows public read access with no write access.
     */
    match /products/{productId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows users to read and write their own order information.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create) request.auth.uid == "{userId}"
     * @allow (get, update, delete) request.auth.uid == "{userId}"
     * @deny (create) request.auth.uid != "{userId}"
     * @deny (get, update, delete) request.auth.uid != "{userId}"
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/orders/{orderId} {
       function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false; // disable list to prevent traversal
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Restricts access to order items.
     * @path /orders/{orderId}/orderItems/{orderItemId}
     * @deny (get, list, create, update, delete) false
     */
    match /orders/{orderId}/orderItems/{orderItemId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read gallery items, but restricts creation, updates, and deletion.
     * @path /gallery/{galleryItemId}
     * @allow (get, list) true
     * @deny (create, update, delete) false
     * @principle Allows public read access with no write access.
     */
    match /gallery/{galleryItemId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}