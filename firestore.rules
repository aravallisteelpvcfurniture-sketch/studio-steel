/**
 * @fileoverview Firestore Security Rules for Aravalli Home Studio.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data while allowing public read access to product and visitor greeting information.
 *
 * Data Structure:
 * - User-specific data (profiles, orders, customizations, chat sessions) is nested under /users/{userId}.
 * - Products and visitor greetings are stored in top-level collections (/products, /visitor_greetings) with public read access.
 *
 * Key Security Decisions:
 * - Users can only access their own data. No cross-user data access is allowed except where explicitly public.
 * - Public listing is enabled for `/products` and `/visitor_greetings`.
 * - The rules explicitly deny all write operations (create, update, delete) if the authorization conditions are not met.
 *
 * Denormalization for Authorization:
 * - User-owned documents, such as `ProductCustomization`, implicitly include the `userId` in the path.
 *   The security rules validate that `request.auth.uid` matches the `userId` in the path for write operations, avoiding the need to duplicate this data inside the document.
 *   This provides a balance between data integrity and rule performance by avoiding a need for potentially redundant checks.
 *
 * Structural Segregation:
 * - Public data (products, visitor greetings) is stored in separate top-level collections, while private user data is stored under the `/users/{userId}` path.
 *   This segregation enables public read access to products and visitor greetings while maintaining strict user ownership for other data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (create, update, delete) if the user's UID matches the userId.
     * @allow (get, list) if the user's UID matches the userId.
     * @deny (create, update, delete) if the user's UID does not match the userId.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows anyone to read product details, but no one to create, update, or delete products.
     * @path /products/{productId}
     * @allow (get, list) to anyone.
     * @deny (create, update, delete) to everyone.
     * @principle Public read access with no write access.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows users to read, create, update, and delete their own orders.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create, update, delete) if the user's UID matches the userId.
     * @allow (get, list) if the user's UID matches the userId.
     * @deny (create, update, delete) if the user's UID does not match the userId.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId}/orders/{orderId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows users to read, create, update, and delete their own order items.
     * @path /users/{userId}/orders/{orderId}/order_items/{orderItemId}
     * @allow (create, update, delete) if the user's UID matches the userId.
     * @allow (get, list) if the user's UID matches the userId.
     * @deny (create, update, delete) if the user's UID does not match the userId.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId}/orders/{orderId}/order_items/{orderItemId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows anyone to read visitor greetings, but no one to create, update, or delete them.
     * @path /visitor_greetings/{greetingId}
     * @allow (get, list) to anyone.
     * @deny (create, update, delete) to everyone.
     * @principle Public read access with no write access.
     */
    match /visitor_greetings/{greetingId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows users to read, create, update, and delete their own product customizations.
     * @path /users/{userId}/product_customizations/{productCustomizationId}
     * @allow (create, update, delete) if the user's UID matches the userId.
     * @allow (get, list) if the user's UID matches the userId.
     * @deny (create, update, delete) if the user's UID does not match the userId.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId}/product_customizations/{productCustomizationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows users to read, create, update, and delete their own chat sessions.
     * @path /users/{userId}/chatSessions/{chatSessionId}
     * @allow (create, update, delete) if the user's UID matches the userId.
     * @allow (get, list) if the user's UID matches the userId.
     * @deny (create, update, delete) if the user's UID does not match the userId.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId}/chatSessions/{chatSessionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows users to read, create, update, and delete their own chat messages within a specific chat session.
     * @path /users/{userId}/chatSessions/{chatSessionId}/messages/{messageId}
     * @allow (create, update, delete) if the user's UID matches the userId.
     * @allow (get, list) if the user's UID matches the userId.
     * @deny (create, update, delete) if the user's UID does not match the userId.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId}/chatSessions/{chatSessionId}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }
  }
}