{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user account within the Aravalli Home Studio application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user."
        },
        "firstName": {
          "type": "string",
          "description": "User's first name."
        },
        "lastName": {
          "type": "string",
          "description": "User's last name."
        },
        "email": {
          "type": "string",
          "description": "User's email address.",
          "format": "email"
        },
        "phoneNumber": {
          "type": "string",
          "description": "User's phone number."
        },
        "registrationDate": {
          "type": "string",
          "description": "Date and time when the user registered.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "firstName",
        "lastName",
        "email",
        "registrationDate"
      ]
    },
    "Product": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Product",
      "type": "object",
      "description": "Represents a furniture product offered by Aravalli Steel PVC Furniture.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the product."
        },
        "name": {
          "type": "string",
          "description": "Name of the product."
        },
        "description": {
          "type": "string",
          "description": "Detailed description of the product."
        },
        "price": {
          "type": "number",
          "description": "Price of the product."
        },
        "imageUrl": {
          "type": "string",
          "description": "URL of the product image.",
          "format": "uri"
        },
        "category": {
          "type": "string",
          "description": "Category of the product (e.g., chair, table)."
        }
      },
      "required": [
        "id",
        "name",
        "description",
        "price",
        "imageUrl",
        "category"
      ]
    },
    "Order": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Order",
      "type": "object",
      "description": "Represents an order placed by a user.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the order."
        },
        "userId": {
          "type": "string",
          "description": "Reference to the User who placed the order. (Relationship: User 1:N Order)"
        },
        "orderDate": {
          "type": "string",
          "description": "Date and time when the order was placed.",
          "format": "date-time"
        },
        "totalAmount": {
          "type": "number",
          "description": "Total amount of the order."
        },
        "status": {
          "type": "string",
          "description": "Current status of the order (e.g., pending, processing, shipped, delivered)."
        },
        "orderItems": {
          "type": "array",
          "description": "List of the order items",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "userId",
        "orderDate",
        "totalAmount",
        "status"
      ]
    },
    "OrderItem": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "OrderItem",
      "type": "object",
      "description": "Represents an item within an order.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the order item."
        },
        "orderId": {
          "type": "string",
          "description": "Reference to the Order this item belongs to. (Relationship: Order 1:N OrderItem)"
        },
        "productId": {
          "type": "string",
          "description": "Reference to the Product that was ordered. (Relationship: Product 1:N OrderItem)"
        },
        "quantity": {
          "type": "number",
          "description": "Quantity of the product ordered."
        },
        "unitPrice": {
          "type": "number",
          "description": "Price of a single unit of the product at the time of the order."
        }
      },
      "required": [
        "id",
        "orderId",
        "productId",
        "quantity",
        "unitPrice"
      ]
    },
    "GalleryItem": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "GalleryItem",
      "type": "object",
      "description": "Represents an item in the gallery, which can be either a photo or a video.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the gallery item."
        },
        "title": {
          "type": "string",
          "description": "Title of the gallery item."
        },
        "description": {
          "type": "string",
          "description": "Description of the gallery item."
        },
        "mediaUrl": {
          "type": "string",
          "description": "URL of the media (photo or video).",
          "format": "uri"
        },
        "mediaType": {
          "type": "string",
          "description": "Type of media (photo or video)."
        },
        "uploadDate": {
          "type": "string",
          "description": "Date and time when the gallery item was uploaded.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "title",
        "description",
        "mediaUrl",
        "mediaType",
        "uploadDate"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profile information. Path-based ownership enforces that only the user can access their own profile.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            }
          ]
        }
      },
      {
        "path": "/products/{productId}",
        "definition": {
          "entityName": "Product",
          "schema": {
            "$ref": "#/backend/entities/Product"
          },
          "description": "Stores product information.  Accessible to all users for browsing the product catalog.",
          "params": [
            {
              "name": "productId",
              "description": "The unique identifier for the product."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/orders/{orderId}",
        "definition": {
          "entityName": "Order",
          "schema": {
            "$ref": "#/backend/entities/Order"
          },
          "description": "Stores order information for each user. Path-based ownership ensures only the user can access their orders.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "orderId",
              "description": "The unique identifier for the order."
            }
          ]
        }
      },
      {
        "path": "/orders/{orderId}/orderItems/{orderItemId}",
        "definition": {
          "entityName": "OrderItem",
          "schema": {
            "$ref": "#/backend/entities/OrderItem"
          },
          "description": "Stores order items associated with a specific order.",
          "params": [
            {
              "name": "orderId",
              "description": "The unique identifier for the order."
            },
            {
              "name": "orderItemId",
              "description": "The unique identifier for the order item."
            }
          ]
        }
      },
      {
        "path": "/gallery/{galleryItemId}",
        "definition": {
          "entityName": "GalleryItem",
          "schema": {
            "$ref": "#/backend/entities/GalleryItem"
          },
          "description": "Stores gallery items (photos and videos) for public display.",
          "params": [
            {
              "name": "galleryItemId",
              "description": "The unique identifier for the gallery item."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to support the Aravalli Home Studio application, focusing on user authentication, product catalog, orders, and a gallery. The design emphasizes security, scalability, and ease of debugging, adhering to the principles of Authorization Independence, Clarity of Intent, DBAC (Database-Based Access Control), and QAPs (Rules are not Filters). \n\n**Authorization Independence:**\n\n*   Path-based ownership (`/users/{userId}`) is used for user-specific data like orders, ensuring that authorization checks can be performed directly on the document path without needing to fetch parent documents.\n\n**Structural Segregation:**\n\n*   User data and product data are stored in separate top-level collections (`/users` and `/products`), reflecting their distinct security requirements.\n\n**Access Modeling:**\n\n*   Private user data (e.g., user profiles) is stored under `/users/{userId}`, enforcing path-based ownership.  Orders are stored under `/users/{userId}/orders/{orderId}` establishing a clear ownership hierarchy.\n\n**QAPs (Rules are not Filters):**\n\n*   The structure enables secure `list` operations by ensuring that each collection contains documents with homogeneous security requirements. For example, listing products does not require filtering based on user roles or permissions.\n\nThis structure provides a solid foundation for building a secure and scalable application while maintaining clear and easily manageable security rules."
  }
}